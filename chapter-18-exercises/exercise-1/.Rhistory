setwd("~/Documents/INFO201/book-exercises/chapter-18-exercises/exercise-1")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# load relevant libraries
library("httr")
library("jsonlite")
query_params <- list("api-key" = nyt_key)
# ignore this !
.DS_Store
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# load relevant libraries
library("httr")
library("jsonlite")
# Use `source()` to load your API key variable from the `apikey.R` file you made.
# Make sure you've set your working directory!
source("apikey.R")
query_params <- list("api-key" = nyt_key)
# Construct an HTTP request to search for reviews for the given movie.
# The base URI is `https://api.nytimes.com/svc/movies/v2/`
# The resource is `reviews/search.json`
# See the interactive console for parameter details:
#   https://developer.nytimes.com/movie_reviews_v2.json
#
# You should use YOUR api key (as the `api-key` parameter)
# and your `movie_name` variable as the search query!
base_uri <- "https://api.nytimes.com/svc/movies/v2/"
endpoint <- "reviews/search.json"
uri <- paste0(base_uri, endpoint)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
# Send the HTTP Request to download the data
# Extract the content and convert it from JSON
response <- GET(uri, query = query_params_list)
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
movie_name = "Parasite"
query_params_list <- list("api-key" = nyt_key, "movie_name" = movie_name)
---
title: "R Markdown Demo"
author: "Natasha Schmid"
date: "2/11/2020"
output: html_document
---
---
title: "R Markdown Demo"
author: "Natasha Schmid"
date: "2/11/2020"
output: html_document
---
---
title: "R Markdown Demo"
author: "Natasha Schmid"
date: "2/11/2020"
output: html_document
---
---
title: "R Markdown Demo"
author: "Natasha Schmid"
date: "2/11/2020"
output: html_document
---
---
title: "R Markdown Demo"
author: "Natasha Schmid"
date: "2/11/2020"
output: html_document
---
---
title: "R Markdown Demo"
author: "Natasha Schmid"
date: "2/11/2020"
output: html_document
---
```{r setup, include=FALSE}
library(knitr)
source("exercise.R") # load analysis file
## This is my report
I like writing **reports**
```{r example, include = FALSE}
library(knitr)
numbers <- runif(1:100)
hist(numbers)
numbers_mean <- mean(numbers)  # get the mean
img_url <- "https://images.pexels.com/photos/1108099/pexels-photo-1108099.jpeg?auto=compress&cs=tinysrgb&dpr=18w=500"
img_markdown <- paste0("![puppies ](",img_url,")")
letters <- c("a", "b", "c", "d")
numbers <- 1:4
df <- data.frame(letters = letters, numbers = numbers)
letters <- c("a", "b", "c", "d")
numbers <- 1:4
df <- data.frame(letters = letters, numbers = numbers)
'r kable(df)'
'r kable(df)'
