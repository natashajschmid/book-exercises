color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "blank"
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(0, 1)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(4, 5)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(4, -5)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(0,1)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(0,-3)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(0,3)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = c(0,1)
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
legend.position='top',
legend.justification='left'
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
legend.position='top',
legend.justification='left',
legend.directio = "horizontal"
)
debugSource('~/Documents/INFO_201_HW/a6-data-visualization-natashajschmid/analysis.R')
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
#legend.position = "top"
legend.position = c(1, 0),
legend.justification = c(1, 0))
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
#legend.position = "top"
legend.position = c(0, 1),
legend.justification = c(1, 0))
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
#legend.position = "top"
legend.position = c(0, 1),
legend.justification = c(0, 1))
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
#legend.position = "top"
legend.position = c(3, 1),
legend.justification = c(0, 1))
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
# legend.position = c(0,1)
#legend.position = "top"
legend.position = c(0, 1),
legend.justification = c(0, 1))
debugSource('~/Documents/INFO_201_HW/a6-data-visualization-natashajschmid/analysis.R')
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "top"
# legend.position = c(0, 1),
# legend.justification = c(0, 1))
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "top"
# legend.position = c(0, 1),
# legend.justification = c(0, 1))
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "top"
# legend.position = c(0, 1),
# legend.justification = c(0, 1))
)
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "top"
# legend.position = c(0, 1),
# legend.justification = c(0, 1))
)
# question 6
total_health_costs <- filter(health_costs, indicatorID == "Total Spending")
# question 6
total_health_costs <- filter(health_costs, indicatorID == "Total Spending")
# question 7 - 13
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "top"
# legend.position = c(0, 1),
# legend.justification = c(0, 1))
)
ggplot(data = health_costs, mapping = aes(x = reorder(iso3c, value), y = value, color = indicatorID)) +
geom_linerange(data = total_health_costs, mapping = aes(ymin = 0, ymax = value)) +
geom_point(mapping = aes(shape = indicatorID)) +
scale_color_brewer(palette = "Dark2") +
labs(
title = "Health Care Expenditures (per capita)",
x = "Country",
y = "Current US$",
color = "Type",
shape = "Type"
) +
theme(
axis.text.x = element_text(size = 7, angle = 90),
legend.position = "top"
# legend.position = c(0, 1),
# legend.justification = c(0, 1))
)
debugSource('~/Documents/INFO_201_HW/a6-data-visualization-natashajschmid/analysis.R')
# part 1, question 2
print(dim(projects_df))
library(shiny); runApp('Desktop/2.25_lecture.R')
# install.packages("shiny")
library("shiny")
# Hey I'm a User Interface
my_ui <- fluidPage(
# formatted content
h1("Hello Shiny"),
# control widget
textInput(inputId = "user_name", label = "What is your name?"),
textInput(inputId = "food", label = "What's your favorite food?"),
sliderInput(
inputId = "slider_value",
label = "What's your favority number?",
min = 0, max = 10, value = 0
),
textOutput(outputId = "message"),
p("Shiny is", strong("kinda"), "fun!")
)
my_server <- function(input_list, output_list) {
# create some text for people to see
output_list$message <- renderText({
# find what the user typed in
greeting <- paste("Hello", input_list$user_name)
return(greeting)
})
}
# create and run the Shiny app
shinyApp(ui = my_ui, server = my_server)
runApp('Desktop/2.25_lecture.R')
runApp('Desktop/2.25_lecture.R')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
# Load the `shiny` package
library("shiny")
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-2')
runApp('Desktop/2.25_lecture.R')
# Finally, define a `ui` variable, assigning it a `navbarPage()` layout.
# You will use `shinyUI()` to render this variable (in `app.R`)
# Give the layout a title of "Income Inequality".
# The layout should include the following elements:
# - Your `intro_panel`
# - Your `growth_panel`
ui <- navbarPage(
title = "Income Inequality"
)
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-4')
# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library("ggplot2")
library("dplyr")
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
# For convenience store the `range()` of values for the `price` column
# (of your sample)
price_price <- range(diamonds_sample$price)
s
# For convenience, get a vector of column names from the `diamonds` data set to
# use as select inputs
features <- colnames(diamonds)
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-3')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-3')
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-3')
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input_input, output_list) {
output_list$my_plot <- renderPlot({
#data wrangling
selected_range <- input_list$price_choice # get the user's value
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
print(filtered_data)
})
}
print(filtered_data)
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
print(filtered_data)
selected_range <- input_list$price_choice # get the user's value
output_list$my_plot <- renderPlot({
#data wrangling
selected_range <- input_list$price_choice # get the user's value
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
the_plot <- ggplot(data = filtered_data) +
geom_point(mapping = aes(
x = input_list$feature_choice,
y = price,
color = cut
))
})
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input_list, output_list) {
output_list$my_plot <- renderPlot({
#data wrangling
selected_range <- input_list$price_choice # get the user's value
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
the_plot <- ggplot(data = filtered_data) +
geom_point(mapping = aes(
x = input_list$feature_choice,
y = price,
color = cut
))
})
}
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-3')
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
print(filtered_data)
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input_list, output_list) {
output_list$my_plot <- renderPlot({
#data wrangling
selected_range <- input_list$price_input # get the user's value
filtered_data <- diamonds_sample %>%
filter(price > selected_range[1], price < selected_range[2])
the_plot <- ggplot(data = filtered_data) +
geom_point(mapping = aes_string(
x = input_list$feature_choice,
y = "price",
color = cut
))
return(the_plot)
})
}
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-3')
View(diamonds_sample)
View(diamonds_sample)
runApp('Documents/INFO201/book-exercises/chapter-19-exercises/exercise-3')
